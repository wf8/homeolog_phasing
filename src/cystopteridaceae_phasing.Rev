#
# Performs homeolog phasing on the Cystopteridaceae Rothfels et al. 2017 dataset.
# Will Freyman
#
# Updated 20200810, CJR

output_file = "output/cystopteridaceae"

# read in data
alignments = [ "../data/cystopteridaceae/finalVersions/APP_alloPPnet_version_reduced.nex",
               "../data/cystopteridaceae/finalVersions/GAP_alloPPnet_version_reduced.nex",
               "../data/cystopteridaceae/finalVersions/IBR_alloPPnet_version_reduced.nex",
               "../data/cystopteridaceae/finalVersions/PGI_alloPPnet_version_reduced.nex"]
num_loci = alignments.size()

for (i in 1:num_loci) {
    data[i] = readDiscreteCharacterData(alignments[i])
}

# add missing taxa
for (i in 1:num_loci) {
    for (j in 1:num_loci) {
        data[i].addMissingTaxa(data[j].taxa())
    }
    # add missing allele
    data[i].addMissingTaxa("G_dry_7981a_B")
}
num_tips = data[1].ntaxa()

# set initial phase
for (i in 1:num_loci) {
    data[i].setHomeologPhase("A_tai_6137_A", "A_tai_6137_A")
    data[i].setHomeologPhase("A_tai_6137_B", "A_tai_6137_B")
    data[i].setHomeologPhase("A_tenC_8745_A", "A_tenC_8745_A") 
    data[i].setHomeologPhase("A_tenC_8745_B", "A_tenC_8745_B") 
    data[i].setHomeologPhase("C_fraA_7009_A", "C_fraA_7009_A") 
    data[i].setHomeologPhase("C_fraA_7009_B", "C_fraA_7009_B") 
    data[i].setHomeologPhase("C_fraB_7248_A", "C_fraB_7248_A") 
    data[i].setHomeologPhase("C_fraB_7248_B", "C_fraB_7248_B") 
    data[i].setHomeologPhase("C_mon_7943_A",  "C_mon_7943_A")
    data[i].setHomeologPhase("C_mon_7943_B",  "C_mon_7943_B")
    data[i].setHomeologPhase("C_pelA_6055_A", "C_pelA_6055_A") 
    data[i].setHomeologPhase("C_pelA_6055_B", "C_pelA_6055_B") 
    #data[i].setHomeologPhase("C_pro_6359_A",  "C_pro_6359_A") #CJR - treating these alleles as separate individuals; this is a diploid
    #data[i].setHomeologPhase("C_pro_6359a_A", "C_pro_6359a_A")
    data[i].setHomeologPhase("C_sudB_8674_A", "C_sudB_8674_A") 
    data[i].setHomeologPhase("C_sudB_8674_B", "C_sudB_8674_B") 
    data[i].setHomeologPhase("C_tas_6379_A",  "C_tas_6379_A")
    data[i].setHomeologPhase("C_tas_6379_B",  "C_tas_6379_B")
    data[i].setHomeologPhase("C_tenu_6387_A", "C_tenu_6387_A") 
    data[i].setHomeologPhase("C_tenu_6387_B", "C_tenu_6387_B") 
    data[i].setHomeologPhase("C_uta_6848_A",  "C_uta_6848_A") 
    data[i].setHomeologPhase("C_uta_6848_B",  "C_uta_6848_B") 
    data[i].setHomeologPhase("G_con_6979_A",  "G_con_6979_A") 
    data[i].setHomeologPhase("G_con_6979_B",  "G_con_6979_B") 

    data[i].setHomeologPhase("G_dis_7751_A",  "G_dis_7751_A")  #CJR - setting this one to swap, since it's not clear whether they are alleles or not
    data[i].setHomeologPhase("G_dis_7751a_A",  "G_dis_7751a_A") 

    data[i].setHomeologPhase("G_oyaC_8739_A", "G_oyaC_8739_A") 
    data[i].setHomeologPhase("G_oyaC_8739_B", "G_oyaC_8739_B") 
    data[i].setHomeologPhase("G_rem_4862_A",  "G_rem_4862_A") 
    data[i].setHomeologPhase("G_rem_4862_B",  "G_rem_4862_B") 
    data[i].setHomeologPhase("G_rob_7945_A",  "G_rob_7945_A") 
    data[i].setHomeologPhase("G_rob_7945_B",  "G_rob_7945_B") 
    data[i].setHomeologPhase("xCystC_7974_A", "xCystC_7974_A") 
    data[i].setHomeologPhase("xCystC_7974_B", "xCystC_7974_B") 
    data[i].setHomeologPhase("xCystG_7974_A", "xCystG_7974_A") 
    data[i].setHomeologPhase("xCystG_7974_B", "xCystG_7974_B") 
    data[i].setHomeologPhase("A_tenB_8704_A", "A_tenB_8704_A") 
    data[i].setHomeologPhase("A_tenB_8704_B", "A_tenB_8704_B") 
    data[i].setHomeologPhase("C_dia_6380_A",  "C_dia_6380_A")
    data[i].setHomeologPhase("C_dia_6380_B",  "C_dia_6380_B")
    data[i].setHomeologPhase("G_dry_7981_A",  "G_dry_7981_A")
    data[i].setHomeologPhase("G_dry_7981_B",  "G_dry_7981_B")
    data[i].setHomeologPhase("G_dry_7981a_A", "G_dry_7981a_A") 
    data[i].setHomeologPhase("G_dry_7981a_B", "G_dry_7981a_B")
}

# all the homeologs, paralogs, and segregating alleles to set up:

#C_pro_6359_A, 
#C_pro_6359a_A

#A_tai_6137_A
#A_tai_6137_B

#A_tenC_8745_A, 
#A_tenC_8745_B, 

#C_fraA_7009_A, 
#C_fraA_7009_B, 

#C_fraB_7248_A, 
#C_fraB_7248_B, 

#C_mon_7943_A, 
#C_mon_7943_B, 

#C_pelA_6055_A, 
#C_pelA_6055_B, 

#C_sudB_8674_A, 
#C_sudB_8674_B, 

#C_tas_6379_A, 
#C_tas_6379_B, 

#C_tenu_6387_A, 
#C_tenu_6387_B, 

#C_uta_6848_A, 
#C_uta_6848_B, 

#G_con_6979_A, 
#G_con_6979_B, 

#G_oyaC_8739_A, 
#G_oyaC_8739_B, 

#G_rem_4862_A, 
#G_rem_4862_B, 

#G_rob_7945_A, 
#G_rob_7945_B, 

#xCystC_7974_A, 
#xCystC_7974_B, 
#xCystG_7974_A, 
#xCystG_7974_B, 

#A_tenB_8704_A, 
#A_tenB_8704_B, 

#C_dia_6380_A, 
#C_dia_6380_B, 

#G_dry_7981_A, 
#G_dry_7981_B, 
#G_dry_7981a_A, 
#G_dry_7981a_B


mvi = 0

n_branches = 2 * num_tips - 3
for (i in 1:n_branches) {
    branch_lengths[i] ~ dnExponential(10)
    moves[++mvi] = mvScale(branch_lengths[i], lambda=1.0, weight=2)
}
topology ~ dnUniformTopology(data[1].taxa())
moves[++mvi] = mvNNI(topology, weight=20.0)
moves[++mvi] = mvSPR(topology, weight=20.0)
tree := treeAssembly(topology, branch_lengths)

for (i in 1:num_loci) {
    
    # gtr for each locus
    er_prior <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior)
    moves[++mvi] = mvSimplexElementScale(er[i], weight=3)

    pi_prior <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior)
    moves[++mvi] = mvSimplexElementScale(pi[i], weight=3)

    Q[i] := fnGTR(er[i], pi[i])

    ctmc[i] ~ dnPhyloCTMC(tree=tree, Q=Q[i], type="DNA")
    ctmc[i].clamp(data[i])
}

w = 10/29
for (i in 1:num_loci) {

    # switch phasing proposals
    #moves[++mvi] = mvHomeologPhase(ctmc[i], "C_pro_6359_A", "C_pro_6359a_A", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "A_tai_6137_A", "A_tai_6137_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "A_tenC_8745_A", "A_tenC_8745_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_fraA_7009_A", "C_fraA_7009_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_fraB_7248_A", "C_fraB_7248_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_mon_7943_A", "C_mon_7943_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_pelA_6055_A", "C_pelA_6055_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_sudB_8674_A", "C_sudB_8674_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_tas_6379_A", "C_tas_6379_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_tenu_6387_A", "C_tenu_6387_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_uta_6848_A", "C_uta_6848_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_con_6979_A", "G_con_6979_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dis_7751a_A", "G_dis_7751_A", weight=w) # CJR - adding this one to swapping
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_oyaC_8739_A", "G_oyaC_8739_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_rem_4862_A", "G_rem_4862_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_rob_7945_A", "G_rob_7945_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "A_tenB_8704_A", "A_tenB_8704_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_dia_6380_A", "C_dia_6380_B", weight=w) # CJR - there was a typo here, _A was being switched with _A ...

    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystC_7974_A", "xCystC_7974_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystC_7974_A", "xCystG_7974_A", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystC_7974_A", "xCystG_7974_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystC_7974_B", "xCystG_7974_A", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystC_7974_B", "xCystG_7974_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystG_7974_A", "xCystG_7974_B", weight=w)

    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dry_7981_A", "G_dry_7981_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dry_7981_A", "G_dry_7981a_A", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dry_7981_A", "G_dry_7981a_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dry_7981_B", "G_dry_7981a_A", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dry_7981_B", "G_dry_7981a_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dry_7981a_A", "G_dry_7981a_B", weight=w)

}

mymodel = model(Q)

monitors[1] = mnModel(filename=output_file + ".log", printgen=1)
monitors[2] = mnFile(filename=output_file + ".trees", printgen=1, tree)
monitors[3] = mnScreen(printgen=1)
monitors[4] = mnHomeologPhase(filename=output_file + "_phase1.log", printgen=1, ctmc[1])
monitors[5] = mnHomeologPhase(filename=output_file + "_phase2.log", printgen=1, ctmc[2])
monitors[6] = mnHomeologPhase(filename=output_file + "_phase3.log", printgen=1, ctmc[3])
monitors[7] = mnHomeologPhase(filename=output_file + "_phase4.log", printgen=1, ctmc[4])

mymcmc = mcmc(mymodel, monitors, moves)
mymcmc.run(generations=5000)
    
treetrace = readTreeTrace(output_file + ".trees", treetype="clock", burnin=0.25)
map_tree = mapTree(treetrace, output_file + "_map.tree")
mcc_tree = mccTree(treetrace, output_file + "_mcc.tree")
mymcmc.operatorSummary()

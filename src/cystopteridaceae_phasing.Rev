#
# Performs homeolog phasing on the Cystopteridaceae Rothfels et al. 2017 dataset.
# Will Freyman
#
# Updated 20201017, CJR


## This script can run each of three different models, depending on what "run" is set to:
	## "run1" includes swapping on four tips for 7981 and two tips for 6379 (this was the original version that I ran. Inspection showed that maybe 7981 had one too many tips, and 6379 one too few, however -- hence the other runs)
	## "run2" includes swapping on four tips for 7981 and three tips for 6379
	## "run3" includes swapping on three tips for 7981, and three for 6379

run = "run2"
bayes_factors = TRUE

output_file = "output/cystopteridaceae" + run

# read in data
alignments = [ "../data/cystopteridaceae/finalVersions/APP_toHomologizer.nex",
               "../data/cystopteridaceae/finalVersions/GAP_toHomologizer.nex",
               "../data/cystopteridaceae/finalVersions/IBR_toHomologizer.nex",
               "../data/cystopteridaceae/finalVersions/PGI_toHomologizer.nex"]

num_loci = alignments.size()

for (i in 1:num_loci) {
    data[i] = readDiscreteCharacterData(alignments[i])
}



## add missing taxa ## TODO - is there away to add in the names with "BLANK" automatically here?
# for (i in 1:num_loci) {
#     for (j in 1:num_loci) {
#         data[i].addMissingTaxa(data[j].taxa())
#     }
#     # add missing allele
#     data[i].addMissingTaxa("7981_copy4")
    
#     if (i == 4) {
#         data[i].taxa()
#     }
# }


## Adding in missing taxa
for (i in 1:num_loci) {
   # Adding additional tip for 7981, because it's not clear how many homeologs/alleles it has
    data[i].addMissingTaxa("7981_BLANK")
   # Adding additional tip for 6379 (looks like the copies at one locus are allelic rather than homeologous)
    data[i].addMissingTaxa("6379_BLANK2")

}  

# # Adding missing taxa to APP
missingTax <- v("8704_BLANK", "8704_BLANK2", "C_bulbifera_7650b", "6380_BLANK", "6380_BLANK2", "7751_BLANK", "7981_BLANK2", "G_oyamense_sp1_6399b")
data[1].addMissingTaxa( missingTax )

# # Adding missing taxa to GAP
missingTax <- v("C_bulbifera_7650a", "7009_BLANK", "C_bulbifera_7650b", "G_oyamense_sp1_6399b")
data[2].addMissingTaxa( missingTax )

# # Adding missing taxa to IBR
missingTax <- v("C_protrusa_6359b", "6379_BLANK", "6848_BLANK", "6848_BLANK2", "6380_BLANK", "6380_BLANK2", "7981_BLANK2")
data[3].addMissingTaxa( missingTax )

# # Adding missing taxa to PGI
missingTax <- v("8704_BLANK", "7751_BLANK", "C_protrusa_6359b", "6848_BLANK")
data[4].addMissingTaxa( missingTax )


num_tips = data[1].ntaxa()


# # Printing the taxon list for each locus, as a check
# for (i in 1:num_loci) {
#     data[i].taxa()
# }



## Set initial phase
## First, do all the ones that don't have any missing data (the sequence names for these will be the same for all loci, so can be done in a loop)
for (i in 1:num_loci) {
    data[i].setHomeologPhase("6137_copy1", "A_taiwaniana_6137_A")
    data[i].setHomeologPhase("6137_copy2", "A_taiwaniana_6137_B")
    data[i].setHomeologPhase("8745_copy1", "A_tenuisecta_sp3_8745_A")
    data[i].setHomeologPhase("8745_copy2", "A_tenuisecta_sp3_8745_B")
    data[i].setHomeologPhase("7248_copy1", "C_fragilis_sp2_7248_A")
    data[i].setHomeologPhase("7248_copy2", "C_fragilis_sp2_7248_B")
    data[i].setHomeologPhase("7943_copy1", "C_montana_7943_A")
    data[i].setHomeologPhase("7943_copy2", "C_montana_7943_B")
    data[i].setHomeologPhase("6055_copy1", "C_pellucida_6055_A")
    data[i].setHomeologPhase("6055_copy2", "C_pellucida_6055_B")
    data[i].setHomeologPhase("8674_copy1", "C_sudetica_8674_A")
    data[i].setHomeologPhase("8674_copy2", "C_sudetica_8674_B")
    data[i].setHomeologPhase("6379_BLANK2", "C_tasmanica_6379_C")
    data[i].setHomeologPhase("6387_copy1", "C_tenuis_6387_A")
    data[i].setHomeologPhase("6387_copy2", "C_tenuis_6387_B")
    data[i].setHomeologPhase("6979_copy1", "G_continentale_6979_A")
    data[i].setHomeologPhase("6979_copy2", "G_continentale_6979_B")
    data[i].setHomeologPhase("8739_copy1", "G_oyamense_sp2_8739_A")
    data[i].setHomeologPhase("8739_copy2", "G_oyamense_sp2_8739_B")
    data[i].setHomeologPhase("4862_copy1", "G_remotepinnatum_4862_A")
    data[i].setHomeologPhase("4862_copy2", "G_remotepinnatum_4862_B")
    data[i].setHomeologPhase("7945_copy1", "G_robertianum_7945_A")
    data[i].setHomeologPhase("7945_copy2", "G_robertianum_7945_B")
    data[i].setHomeologPhase("7974_copy1", "xCystocarpium_7974_A")
    data[i].setHomeologPhase("7974_copy2", "xCystocarpium_7974_B")
    data[i].setHomeologPhase("7974_copy3", "xCystocarpium_7974_C")
    data[i].setHomeologPhase("7974_copy4", "xCystocarpium_7974_D")
}

## Then do APP for the remaining ones (these samples are missing from some loci, so there will be sequences with "BLANK" added to their name, so have to be done locus-by-locus)
data[1].setHomeologPhase("8704_BLANK", "A_tenuisecta_sp2_8704_A")
data[1].setHomeologPhase("8704_BLANK2", "A_tenuisecta_sp2_8704_B")
data[1].setHomeologPhase("6380_BLANK", "C_diaphana_6380_A")
data[1].setHomeologPhase("6380_BLANK2", "C_diaphana_6380_B")
data[1].setHomeologPhase("7009_copy1", "C_fragilis_sp1_7009_A")
data[1].setHomeologPhase("7009_copy2", "C_fragilis_sp1_7009_B")
data[1].setHomeologPhase("6379_copy1", "C_tasmanica_6379_A")
data[1].setHomeologPhase("6379_copy2", "C_tasmanica_6379_B")
data[1].setHomeologPhase("6848_copy1", "C_utahensis_6848_A")
data[1].setHomeologPhase("6848_copy2", "C_utahensis_6848_B")
data[1].setHomeologPhase("7751_copy1", "G_disjunctum_7751_A")
data[1].setHomeologPhase("7751_BLANK", "G_disjunctum_7751_B")
data[1].setHomeologPhase("7981_copy1", "G_dryopteris_7981_A")
data[1].setHomeologPhase("7981_copy2", "G_dryopteris_7981_B")
data[1].setHomeologPhase("7981_BLANK2", "G_dryopteris_7981_C")
data[1].setHomeologPhase("7981_BLANK", "G_dryopteris_7981_D")

## Then do GAP for the remaining ones
data[2].setHomeologPhase("8704_copy1", "A_tenuisecta_sp2_8704_A")
data[2].setHomeologPhase("8704_copy2", "A_tenuisecta_sp2_8704_B")
data[2].setHomeologPhase("6380_copy1", "C_diaphana_6380_A")
data[2].setHomeologPhase("6380_copy2", "C_diaphana_6380_B")
data[2].setHomeologPhase("7009_copy1", "C_fragilis_sp1_7009_A")
data[2].setHomeologPhase("7009_BLANK", "C_fragilis_sp1_7009_B")
data[2].setHomeologPhase("6379_copy1", "C_tasmanica_6379_A")
data[2].setHomeologPhase("6379_copy2", "C_tasmanica_6379_B")
data[2].setHomeologPhase("6848_copy1", "C_utahensis_6848_A")
data[2].setHomeologPhase("6848_copy2", "C_utahensis_6848_B")
data[2].setHomeologPhase("7751_copy1", "G_disjunctum_7751_A")
data[2].setHomeologPhase("7751_copy2", "G_disjunctum_7751_B")
data[2].setHomeologPhase("7981_copy1", "G_dryopteris_7981_A")
data[2].setHomeologPhase("7981_copy2", "G_dryopteris_7981_B")
data[2].setHomeologPhase("7981_copy3", "G_dryopteris_7981_C")
data[2].setHomeologPhase("7981_BLANK", "G_dryopteris_7981_D")

## Then do IBR for the remaining ones
data[3].setHomeologPhase("8704_copy1", "A_tenuisecta_sp2_8704_A")
data[3].setHomeologPhase("8704_copy2", "A_tenuisecta_sp2_8704_B")
data[3].setHomeologPhase("6380_BLANK", "C_diaphana_6380_A")
data[3].setHomeologPhase("6380_BLANK2", "C_diaphana_6380_B")
data[3].setHomeologPhase("7009_copy1", "C_fragilis_sp1_7009_A")
data[3].setHomeologPhase("7009_copy2", "C_fragilis_sp1_7009_B")
data[3].setHomeologPhase("6379_copy1", "C_tasmanica_6379_A")
data[3].setHomeologPhase("6379_BLANK", "C_tasmanica_6379_B")
data[3].setHomeologPhase("6848_BLANK", "C_utahensis_6848_A")
data[3].setHomeologPhase("6848_BLANK2", "C_utahensis_6848_B")
data[3].setHomeologPhase("7751_copy1", "G_disjunctum_7751_A")
data[3].setHomeologPhase("7751_copy2", "G_disjunctum_7751_B")
data[3].setHomeologPhase("7981_copy1", "G_dryopteris_7981_A")
data[3].setHomeologPhase("7981_copy2", "G_dryopteris_7981_B")
data[3].setHomeologPhase("7981_BLANK2", "G_dryopteris_7981_C")
data[3].setHomeologPhase("7981_BLANK", "G_dryopteris_7981_D")

## Then do PGI for the remaining ones
data[4].setHomeologPhase("8704_copy1", "A_tenuisecta_sp2_8704_A")
data[4].setHomeologPhase("8704_BLANK", "A_tenuisecta_sp2_8704_B")
data[4].setHomeologPhase("6380_copy1", "C_diaphana_6380_A")
data[4].setHomeologPhase("6380_copy2", "C_diaphana_6380_B")
data[4].setHomeologPhase("7009_copy1", "C_fragilis_sp1_7009_A")
data[4].setHomeologPhase("7009_copy2", "C_fragilis_sp1_7009_B")
data[4].setHomeologPhase("6379_copy1", "C_tasmanica_6379_A")
data[4].setHomeologPhase("6379_copy2", "C_tasmanica_6379_B")
data[4].setHomeologPhase("6848_copy1", "C_utahensis_6848_A")
data[4].setHomeologPhase("6848_BLANK", "C_utahensis_6848_B")
data[4].setHomeologPhase("7751_copy1", "G_disjunctum_7751_A")
data[4].setHomeologPhase("7751_BLANK", "G_disjunctum_7751_B")
data[4].setHomeologPhase("7981_copy1", "G_dryopteris_7981_A")
data[4].setHomeologPhase("7981_copy2", "G_dryopteris_7981_B")
data[4].setHomeologPhase("7981_copy3", "G_dryopteris_7981_C")
data[4].setHomeologPhase("7981_BLANK", "G_dryopteris_7981_D")




mvi = 0

n_branches = 2 * num_tips - 3
for (i in 1:n_branches) {
    branch_lengths[i] ~ dnExponential(10)
    moves[++mvi] = mvScale(branch_lengths[i], lambda=1.0, weight=2)
}
topology ~ dnUniformTopology(data[1].taxa())
moves[++mvi] = mvNNI(topology, weight=20.0)
moves[++mvi] = mvSPR(topology, weight=20.0)
tree := treeAssembly(topology, branch_lengths)

for (i in 1:num_loci) {
    
    # gtr for each locus
    er_prior <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior)
    moves[++mvi] = mvSimplexElementScale(er[i], weight=3)

    pi_prior <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior)
    moves[++mvi] = mvSimplexElementScale(pi[i], weight=3)

    Q[i] := fnGTR(er[i], pi[i])

    ctmc[i] ~ dnPhyloCTMC(tree=tree, Q=Q[i], type="DNA")
    ctmc[i].clamp(data[i])
}

w = 10/29
for (i in 1:num_loci) {

    # switch phasing proposals
    moves[++mvi] = mvHomeologPhase(ctmc[i], "A_taiwaniana_6137_A", "A_taiwaniana_6137_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "A_tenuisecta_sp2_8704_A", "A_tenuisecta_sp2_8704_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "A_tenuisecta_sp3_8745_A", "A_tenuisecta_sp3_8745_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_diaphana_6380_A", "C_diaphana_6380_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_fragilis_sp1_7009_A", "C_fragilis_sp1_7009_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_fragilis_sp2_7248_A", "C_fragilis_sp2_7248_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_montana_7943_A", "C_montana_7943_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_pellucida_6055_A", "C_pellucida_6055_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_sudetica_8674_A", "C_sudetica_8674_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_tasmanica_6379_A", "C_tasmanica_6379_B", weight=w)
    
    if(run == "run2" | run == "run3"){
    	moves[++mvi] = mvHomeologPhase(ctmc[i], "C_tasmanica_6379_A", "C_tasmanica_6379_C", weight=w)
    	moves[++mvi] = mvHomeologPhase(ctmc[i], "C_tasmanica_6379_B", "C_tasmanica_6379_C", weight=w)
    } # runs2 and 3 are the ones with an extra C_tasmanica tip (in the swapping)

    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_tenuis_6387_A", "C_tenuis_6387_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "C_utahensis_6848_A", "C_utahensis_6848_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_continentale_6979_A", "G_continentale_6979_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_disjunctum_7751_A", "G_disjunctum_7751_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_oyamense_sp2_8739_A", "G_oyamense_sp2_8739_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_remotepinnatum_4862_A", "G_remotepinnatum_4862_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_robertianum_7945_A", "G_robertianum_7945_B", weight=w)

    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dryopteris_7981_A", "G_dryopteris_7981_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dryopteris_7981_A", "G_dryopteris_7981_C", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dryopteris_7981_B", "G_dryopteris_7981_C", weight=w)
    
    if(run == "run1" | run == "run2"){
    	moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dryopteris_7981_A", "G_dryopteris_7981_D", weight=w)
    	moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dryopteris_7981_B", "G_dryopteris_7981_D", weight=w)
    	moves[++mvi] = mvHomeologPhase(ctmc[i], "G_dryopteris_7981_C", "G_dryopteris_7981_D", weight=w)
	} # run1 and run2 are the two runs where swapping is allowed to the fourth 7981 tip

    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystocarpium_7974_A", "xCystocarpium_7974_B", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystocarpium_7974_A", "xCystocarpium_7974_C", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystocarpium_7974_B", "xCystocarpium_7974_C", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystocarpium_7974_A", "xCystocarpium_7974_D", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystocarpium_7974_B", "xCystocarpium_7974_D", weight=w)
    moves[++mvi] = mvHomeologPhase(ctmc[i], "xCystocarpium_7974_C", "xCystocarpium_7974_D", weight=w)
}

if(run == "run1"){
	pruned_tree := fnPruneTree(tree, prune=v("C_tasmanica_6379_C"))
} # The tip that has all blank sequences, and is never swapped to, will presumably float around everywhere, so removing it from the trees

if(run == "run3"){
	pruned_tree := fnPruneTree(tree, prune=v("G_dryopteris_7981_D"))
}


mymodel = model(Q)


mni = 0

# The er and pi parameters are in vectors, so won't get logged to the output file; need this workaround here (adding them to a monitor individually)
monitors[++mni] = mnFile(filename=output_file + "allparams.log", printgen=1)
for(i in 1:num_loci){
	monitors[mni].addVariable(er[i])
    monitors[mni].addVariable(pi[i])
}

monitors[++mni] = mnModel(filename=output_file + ".log", printgen=1)
monitors[++mni] = mnFile(filename=output_file + ".trees", printgen=1, tree)
monitors[++mni] = mnScreen(printgen=1)
monitors[++mni] = mnHomeologPhase(filename=output_file + "_phase1.log", printgen=1, ctmc[1])
monitors[++mni] = mnHomeologPhase(filename=output_file + "_phase2.log", printgen=1, ctmc[2])
monitors[++mni] = mnHomeologPhase(filename=output_file + "_phase3.log", printgen=1, ctmc[3])
monitors[++mni] = mnHomeologPhase(filename=output_file + "_phase4.log", printgen=1, ctmc[4])

if(run == "run1" | run == "run3"){
	monitors[++mni] = mnFile(filename=output_file + "pruned.trees", printgen=1, pruned_tree)
} # For those cases where there is an entirely blank species tree tip (with no swapping to it), want to log the pruned trees, too

if (bayes_factors) {
    pow_p = powerPosterior(mymodel, moves, monitors, output_file + ".out", cats=50) 
    pow_p.burnin(generations=6000, tuningInterval=600)
    pow_p.run(generations=6000)  
    ss = steppingStoneSampler(file=output_file + ".out", powerColumnName="power", likelihoodColumnName="likelihood")
    ss.marginal() 
} else {
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.run(generations=6000)
        
    treetrace = readTreeTrace(output_file + ".trees", treetype="clock", burnin=0.5)
    map_tree = mapTree(treetrace, output_file + "_map.tree")
    mcc_tree = mccTree(treetrace, output_file + "_mcc.tree")

    if(run == "run1" | run == "run3"){
        treetrace = readTreeTrace(output_file + "pruned.trees", treetype="clock", burnin=0.5)
        map_tree = mapTree(treetrace, output_file + "_pruned_map.tree")
        mcc_tree = mccTree(treetrace, output_file + "_pruned_mcc.tree")
    } # For those cases where there is an entirely blank species tree tip (with no swapping to it), want to log the pruned trees, too

    mymcmc.operatorSummary()
}

# G_dryopteris_7981 phasing model test.
# Model 1 = 3 tips
# Model 2 = 4 tips
# Model 3 = 5 tips

genelist= "data/genelist.txt"
initialPhaseFn = "mcmc/src/InitialPhase.rev"
phaseMovesFn = "mcmc/src/PhaseMoves.rev"
output_file = "mcmc/output_" + run + "/"

bayes_factors = FALSE

#
alignments = readTable(genelist)
num_loci = alignments.size()

for (i in 1:num_loci) {
    data[i] = readDiscreteCharacterData(alignments[i][1])
}

# set initial phase and add dummy tips
source(initialPhaseFn)

# add missing taxa
for (i in 1:num_loci) {
    for (j in 1:num_loci) {
        data[i].addMissingTaxa(data[j].taxa())
    }
}

num_tips = data[1].ntaxa()
n_branches = 2 * num_tips - 3

mvi = 0

up_down_scale_move = ++mvi 
moves[up_down_scale_move] = mvUpDownScale(weight=4.0, lambda=0.01)

# The average branchlength in the MCC tree in prelimnary runs is 0.004016298
branch_length_mean <- 0.004016

for (i in 1:n_branches) {
    branch_lengths[i] ~ dnExponential(1 / branch_length_mean)
    branch_lengths[i].setValue(0.004)
    moves[++mvi] = mvScale(branch_lengths[i], lambda=1.0, weight=0.8)
    moves[up_down_scale_move].addVariable(branch_lengths[i], up=true)
}


topology ~ dnUniformTopology(data[1].taxa())
moves[++mvi] = mvNNI(topology, weight=40.0)
moves[++mvi] = mvSPR(topology, weight=40.0)

tree := treeAssembly(topology, branch_lengths)

# monitor the tree length
tree_length := tree.treeLength()

for (i in 1:num_loci) {
    
    # gtr for each locus
    er_prior <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior)
    er[i].setValue(simplex(v(1,1,1,1,1,1)))
    moves[++mvi] = mvSimplexElementScale(er[i], weight=5)

    pi_prior <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior)
    pi[i].setValue(simplex(v(1,1,1,1)))
    moves[++mvi] = mvSimplexElementScale(pi[i], weight=5)

    Q[i] := fnGTR(er[i], pi[i])

    if (i == 1) {
        rate_multiplier[i] <- 1.0
    } else {
        rate_multiplier[i] ~ dnExponential(1)
        rate_multiplier[i].setValue(1.0)
        moves[++mvi] = mvScale(rate_multiplier[i], weight=5)
        moves[up_down_scale_move].addVariable(rate_multiplier[i], up=false)
    }

}

for (i in 1:num_loci) {
    ctmc[i] ~ dnPhyloCTMC(tree=tree, Q=Q[i], branchRates=rate_multiplier[i], type="DNA")
    ctmc[i].clamp(data[i])  
}


# make phasing proposals
w = 2 
source(phaseMovesFn)

mymodel = model(Q)

# set up monitors
mni = 0
monitors[++mni] = mnFile(filename=output_file + "allparams.log", printgen=1)
for(i in 1:num_loci){
    monitors[mni].addVariable(er[i])
    monitors[mni].addVariable(pi[i])
}
monitors[++mni] = mnModel(filename=output_file + ".log", printgen=1)
monitors[++mni] = mnFile(filename=output_file + ".trees", printgen=1, tree)
monitors[++mni] = mnScreen(printgen=1)
for (i in 1:num_loci){
    monitors[++mni] = mnHomeologPhase(filename=output_file + "_gene" + i + "_phase.log", printgen=1, ctmc[i])
}

if (bayes_factors) {
    pow_p = powerPosterior(mymodel, moves, monitors, output_file + ".out", cats=50, sampleFreq=1) 
    pow_p.burnin(generations=1000, tuningInterval=50)
    pow_p.run(generations=1000)  
    ss = steppingStoneSampler(file=output_file + ".out", powerColumnName="power", likelihoodColumnName="likelihood")
    write(model, run, ss.marginal(), "\n", filename=output_file + "marginals.csv", 
          append=TRUE, separator=",")
} else {
    mymcmc = mcmc(mymodel, monitors, moves)
    mymcmc.run(generations=10000)
    treetrace = readTreeTrace(output_file + ".trees", treetype="clock", burnin=0.25) 
    map_tree = mapTree(treetrace, output_file + "_map.tree")
    mcc_tree = mccTree(treetrace, output_file + "_mcc.tree")
}
